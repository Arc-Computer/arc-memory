name: Validate Launch Readiness

on:
  push:
    branches: [ launch-ready ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install link checker
      run: |
        python -m pip install --upgrade pip
        pip install markdown-link-check
    
    - name: Check links in quickstart.md
      run: |
        npx markdown-link-check docs/quickstart.md
    
    - name: Check links in getting_started.md
      run: |
        npx markdown-link-check docs/getting_started.md
    
    - name: Check links in GitHub Actions README
      run: |
        npx markdown-link-check docs/examples/github_actions/README.md
    
    - name: Validate code examples in documentation
      run: |
        # Extract Python code blocks from markdown files and validate syntax
        python -c "
import re
import ast
import sys

def extract_python_code(file_path):
    with open(file_path, 'r') as f:
        content = f.read()
    
    # Find Python code blocks
    pattern = r'```python\n(.*?)```'
    code_blocks = re.findall(pattern, content, re.DOTALL)
    return code_blocks

def validate_python_syntax(code):
    try:
        ast.parse(code)
        return True
    except SyntaxError as e:
        print(f'Syntax error: {e}')
        return False

files = [
    'docs/quickstart.md',
    'docs/getting_started.md',
    'docs/examples/github_actions/README.md'
]

has_errors = False
for file_path in files:
    print(f'Validating code examples in {file_path}')
    code_blocks = extract_python_code(file_path)
    for i, code in enumerate(code_blocks):
        if not validate_python_syntax(code):
            print(f'Error in {file_path}, code block {i+1}')
            has_errors = True
        else:
            print(f'Code block {i+1} in {file_path} is valid')

sys.exit(1 if has_errors else 0)
        "

  validate-installation-script:
    name: Validate Installation Script
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Test installation script
      run: |
        # Make the script executable
        chmod +x docs/examples/install_arc.sh
        
        # Create a temporary virtual environment for testing
        python -m venv test_env
        
        # Test basic installation
        ./docs/examples/install_arc.sh --python ./test_env/bin/python
        
        # Verify installation
        ./test_env/bin/python -c "import arc_memory; print(f'Arc Memory {arc_memory.__version__} installed successfully!')"
    
    - name: Test uninstallation script
      run: |
        # Make the script executable
        chmod +x docs/examples/uninstall_arc.sh
        
        # Run uninstallation script (with auto-yes)
        echo "y" | ./docs/examples/uninstall_arc.sh --python ./test_env/bin/python
        
        # Verify uninstallation (should fail to import)
        if ./test_env/bin/python -c "import arc_memory" 2>/dev/null; then
          echo "Uninstallation failed: arc_memory is still importable"
          exit 1
        else
          echo "Uninstallation successful: arc_memory is no longer importable"
        fi

  validate-github-actions:
    name: Validate GitHub Actions Workflows
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Validate workflow syntax
      run: |
        # Install actionlint
        curl -sL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash
        
        # Validate GitHub Actions workflow files
        ./actionlint docs/examples/github_actions/arc_memory_pr_review.yml
        ./actionlint docs/examples/github_actions/arc_memory_update.yml
    
    - name: Install Arc Memory
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test GitHub Actions workflow functionality
      run: |
        # Create a test repository
        mkdir -p test_repo
        cd test_repo
        git init
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        echo "# Test Repository" > README.md
        git add README.md
        git commit -m "Initial commit"
        
        # Copy the GitHub Actions workflow
        mkdir -p .github/workflows
        cp ../docs/examples/github_actions/arc_memory_pr_review.yml .github/workflows/
        
        # Build a knowledge graph
        arc build
        
        # Verify the knowledge graph was built
        arc stats
        
        # Test export functionality
        arc export --pr-sha $(git rev-parse HEAD) --output-path test_export.json
        
        # Verify the export file exists
        if [ -f "test_export.json" ]; then
          echo "Export successful"
        else
          echo "Export failed"
          exit 1
        fi

  validate-5-minute-setup:
    name: Validate 5-Minute Setup
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Test 5-minute setup instructions
      run: |
        # Create a test repository
        mkdir -p test_repo
        cd test_repo
        git init
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        echo "# Test Repository" > README.md
        git add README.md
        git commit -m "Initial commit"
        
        # Install Arc Memory
        python -m pip install --upgrade pip
        pip install arc-memory[all]
        
        # Build knowledge graph
        arc build
        
        # Ask a question about the codebase
        arc why query "Why was this repository created?"
        
        # Verify the knowledge graph was built
        arc stats
